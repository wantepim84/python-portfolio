{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "73cd8451-36cc-432c-8277-e1e23cb7ee8b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: shapely in c:\\users\\w_ant\\appdata\\local\\programs\\python\\python311\\lib\\site-packages (2.0.2)\n",
      "Requirement already satisfied: numpy>=1.14 in c:\\users\\w_ant\\appdata\\local\\programs\\python\\python311\\lib\\site-packages (from shapely) (1.26.1)\n",
      "Requirement already satisfied: networkx in c:\\users\\w_ant\\appdata\\local\\programs\\python\\python311\\lib\\site-packages (3.2.1)\n",
      "Requirement already satisfied: matplotlib in c:\\users\\w_ant\\appdata\\local\\programs\\python\\python311\\lib\\site-packages (3.8.0)\n",
      "Requirement already satisfied: contourpy>=1.0.1 in c:\\users\\w_ant\\appdata\\local\\programs\\python\\python311\\lib\\site-packages (from matplotlib) (1.1.1)\n",
      "Requirement already satisfied: cycler>=0.10 in c:\\users\\w_ant\\appdata\\local\\programs\\python\\python311\\lib\\site-packages (from matplotlib) (0.12.1)\n",
      "Requirement already satisfied: fonttools>=4.22.0 in c:\\users\\w_ant\\appdata\\local\\programs\\python\\python311\\lib\\site-packages (from matplotlib) (4.43.1)\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in c:\\users\\w_ant\\appdata\\local\\programs\\python\\python311\\lib\\site-packages (from matplotlib) (1.4.5)\n",
      "Requirement already satisfied: numpy<2,>=1.21 in c:\\users\\w_ant\\appdata\\local\\programs\\python\\python311\\lib\\site-packages (from matplotlib) (1.26.1)\n",
      "Requirement already satisfied: packaging>=20.0 in c:\\users\\w_ant\\appdata\\local\\programs\\python\\python311\\lib\\site-packages (from matplotlib) (23.1)\n",
      "Requirement already satisfied: pillow>=6.2.0 in c:\\users\\w_ant\\appdata\\local\\programs\\python\\python311\\lib\\site-packages (from matplotlib) (10.1.0)\n",
      "Requirement already satisfied: pyparsing>=2.3.1 in c:\\users\\w_ant\\appdata\\local\\programs\\python\\python311\\lib\\site-packages (from matplotlib) (3.1.1)\n",
      "Requirement already satisfied: python-dateutil>=2.7 in c:\\users\\w_ant\\appdata\\local\\programs\\python\\python311\\lib\\site-packages (from matplotlib) (2.8.2)\n",
      "Requirement already satisfied: six>=1.5 in c:\\users\\w_ant\\appdata\\local\\programs\\python\\python311\\lib\\site-packages (from python-dateutil>=2.7->matplotlib) (1.16.0)\n"
     ]
    }
   ],
   "source": [
    "!pip install shapely\n",
    "!pip install networkx\n",
    "!pip install matplotlib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "46f1497b-9042-4a8f-b4dc-cf3adc28b0da",
   "metadata": {},
   "outputs": [],
   "source": [
    "import networkx as nx\n",
    "import matplotlib.pyplot as plt\n",
    "from shapely.geometry import Polygon"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "6d11edeb-6806-436c-963b-87fcad5f8baf",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define the coordinates of the outer polygon\n",
    "outer_polygon_coords = ((0, 10), (2, 10), (2, 0), (5, 0),\n",
    "(5, 4),(13, 4), (13, 6), (15, 6),\n",
    "(15, 0), (19, 0), (19, 4), (28, 4), (28, 6),\n",
    "(30, 6), (30, 7), (25, 7), (25, 9), (29, 9), (29,10),\n",
    "(27,10), (27,25),(13,25), (13,18), (5, 18),\n",
    "(5, 22), (0, 22)) # input your own data\n",
    "\n",
    "# Define the coordinates of the first inner polygon (hole1)\n",
    "inner_polygon1_coords = ((7, 16), (9, 16), (9, 12), (7, 12)) # input your own data, if needed\n",
    "\n",
    "# Define the coordinates of the second inner polygon (hole2)\n",
    "inner_polygon2_coords = ((14, 15), (14, 13), (19, 13), (19, 15)) # input your own data, if needed\n",
    "\n",
    "# Define the coordinates of the third inner polygon (hole3)\n",
    "inner_polygon3_coords = ((23, 16), (25, 16), (25, 12), (23, 12)) # input your own data, if needed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "3b70fc4f-c36d-4c1a-934a-d19e5a2019aa",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a NetworkX graph to represent the polygon with holes\n",
    "polygon_graph = nx.Graph()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f901c651-831e-4a6b-a3ba-1f5733de16bb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function to add nodes for the coordinates of a polygon\n",
    "def add_polygon_to_graph(coords, graph, offset):\n",
    "    node_mapping = {}\n",
    "    for i, (x, y) in enumerate(coords):\n",
    "        node = i + offset\n",
    "        graph.add_node(node, pos=(x, y))\n",
    "        node_mapping[(x, y)] = node\n",
    "    return node_mapping"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "acf06e1e-7dbd-495a-bfb4-ae412a833067",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Add coordinates of all structure to one graph\n",
    "\n",
    "# Add the outer polygon to the graph\n",
    "outer_polygon_mapping = add_polygon_to_graph(outer_polygon_coords, polygon_graph, offset=0)\n",
    "\n",
    "# Add the first inner polygon to the graph\n",
    "inner_polygon1_mapping = add_polygon_to_graph(inner_polygon1_coords, polygon_graph, offset=len(outer_polygon_coords))\n",
    "\n",
    "# Add the second inner polygon to the graph\n",
    "inner_polygon2_mapping = add_polygon_to_graph(inner_polygon2_coords, polygon_graph, offset=len(outer_polygon_coords) + len(inner_polygon1_coords))\n",
    "\n",
    "# Add the second inner polygon to the graph\n",
    "inner_polygon3_mapping = add_polygon_to_graph(inner_polygon3_coords, polygon_graph, offset=len(outer_polygon_coords) + len(inner_polygon1_coords) + len(inner_polygon2_coords))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "a6a91d2b-68c1-4fd2-be11-df9ca89888b8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create edges between nodes to form the outer and inner polygons\n",
    "def create_edges(mapping, graph):\n",
    "    coords = list(mapping.keys())\n",
    "    for i in range(len(coords) - 1):\n",
    "        graph.add_edge(mapping[coords[i]], mapping[coords[i + 1]])\n",
    "    graph.add_edge(mapping[coords[-1]], mapping[coords[0]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "02300049-e6d2-4ee0-a35f-5db3007632ca",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create edges for all the structures on the main graph\n",
    "\n",
    "# Create edges for the outer polygon\n",
    "create_edges(outer_polygon_mapping, polygon_graph)\n",
    "\n",
    "# Create edges for the first inner polygon\n",
    "create_edges(inner_polygon1_mapping, polygon_graph)\n",
    "\n",
    "# Create edges for the second inner polygon\n",
    "create_edges(inner_polygon2_mapping, polygon_graph)\n",
    "\n",
    "# Create edges for the third inner polygon\n",
    "create_edges(inner_polygon3_mapping, polygon_graph)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9ad488bc-fe0c-4be5-b0ce-ee117b0cd020",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualization of recrtilinear polygon containing holes\n",
    "\n",
    "pos = nx.get_node_attributes(polygon_graph, 'pos')\n",
    "nx.draw(polygon_graph, pos, with_labels=True, node_size=100, node_color='lightblue', font_size=5)\n",
    "plt.title('Polygon with Three Holes')\n",
    "\n",
    "# Show the plot\n",
    "plt.gca().set_aspect('equal', adjustable='box')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "cda07a00-52e8-4f42-bf7d-5a46755a34ea",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function to identify axis-parallel nodes (same x or y coordinate) that are not connected by an edge\n",
    "def find_axis_parallel_nodes(graph):\n",
    "    axis_parallel_nodes = []\n",
    "    for node1 in graph.nodes():\n",
    "        x1, y1 = pos[node1]\n",
    "        for node2 in graph.nodes():\n",
    "            if node1 != node2:\n",
    "                x2, y2 = pos[node2]\n",
    "                if (x1 == x2 or y1 == y2) and not graph.has_edge(node1, node2):\n",
    "                    axis_parallel_nodes.append((node1, node2))\n",
    "    return axis_parallel_nodes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "8264cc7c-d400-4f79-b8ca-8e3b0957301f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Axis-parallel nodes not connected to each other:\n",
      "[(0, 18), (0, 19), (1, 18), (1, 19), (2, 8), (2, 9), (3, 8), (3, 9), (3, 23), (3, 24), (4, 10), (4, 11), (4, 23), (4, 24), (5, 10), (5, 11), (5, 21), (5, 22), (6, 12), (6, 13), (6, 21), (6, 22), (7, 12), (7, 13), (8, 2), (8, 3), (9, 2), (9, 3), (9, 32), (9, 33), (10, 4), (10, 5), (10, 32), (10, 33), (11, 4), (11, 5), (12, 6), (12, 7), (13, 6), (13, 7), (15, 35), (15, 36), (16, 35), (16, 36), (18, 0), (18, 1), (19, 0), (19, 1), (21, 5), (21, 6), (22, 5), (22, 6), (23, 3), (23, 4), (24, 3), (24, 4), (26, 34), (26, 35), (27, 34), (27, 35), (28, 36), (28, 37), (29, 36), (29, 37), (32, 9), (32, 10), (33, 9), (33, 10), (34, 26), (34, 27), (35, 15), (35, 16), (35, 26), (35, 27), (36, 15), (36, 16), (36, 28), (36, 29), (37, 28), (37, 29)]\n"
     ]
    }
   ],
   "source": [
    "# Find axis-parallel unconnected nodes for the entire polygon graph\n",
    "axis_parallel_nodes = find_axis_parallel_nodes(polygon_graph)\n",
    "\n",
    "# Print the results\n",
    "print(\"Axis-parallel nodes not connected to each other:\")\n",
    "print(axis_parallel_nodes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "08617c14-4c7b-497b-bd1b-5be9fa037e16",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Using Hopcroft Karp Algorithm and visualisation of the graph, to find axis parrellel nodes that have 270° interior angle (concave vertices)\n",
    "dissection_nodes = [(4, 23), (6, 22), (1, 19), (27, 34), (28, 37), (16, 36),(10, 32), (7, 12)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "f1604b01-5ee1-428f-9304-e5cf96ebbe25",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Draw the axis-parallel diagonals between two concave vertices that are contained entirely within the polygon\n",
    "# Add dissection edges in red( Choose colour of your choice)\n",
    "\n",
    "# Add dissection edges and labels\n",
    "dissection_edges = []\n",
    "edge_labels = {}\n",
    "edge_label_counter = 1\n",
    "for u, v in dissection_nodes:\n",
    "    polygon_graph.add_edge(u, v)\n",
    "    dissection_edges.append((u, v))\n",
    "    edge_labels[(u, v)] = str(edge_label_counter)\n",
    "    edge_label_counter += 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "85bef482-8e49-4c39-b815-881a7ce08b8c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualization of polygon with dissection lines between adjacent concave vertices\n",
    "\n",
    "# Visualization\n",
    "pos = nx.get_node_attributes(polygon_graph, 'pos')\n",
    "\n",
    "# Create a red-colored dissection_edges list to differentiate them from the original edges\n",
    "edge_colors = ['black' if edge not in dissection_edges else 'red' for edge in polygon_graph.edges()]\n",
    "\n",
    "# Draw the graph with edge labels\n",
    "nx.draw(polygon_graph, pos, with_labels=True, node_size=100, node_color='lightblue', font_size=8, edge_color=edge_colors)\n",
    "nx.draw_networkx_edge_labels(polygon_graph, pos, edge_labels=edge_labels, font_size=8, font_color='red')\n",
    "plt.title('Polygon with Dissection Edges')\n",
    "plt.gca().set_aspect('equal', adjustable='box')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "388fc883-6180-4de7-b084-45aa51aade61",
   "metadata": {},
   "outputs": [],
   "source": [
    "# From edge labels for the dissection, develop edgelist of overlapping lines for intersection graph\n",
    "# Define the edge list\n",
    "edges = [(1, 4), (2, 4), (2, 6), (2, 5), (4, 7), (3, 7), (6, 7), (7, 8)]\n",
    "\n",
    "# Define the nodes in each group\n",
    "group0 = [1, 2, 7, 8]\n",
    "group1 = [3, 4, 5, 6]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "2b3e0671-7e6d-49cb-afb9-a7bec8c4f971",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create an empty bipartite graph\n",
    "G = nx.Graph()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "f073f449-546b-4f18-8eed-0b1a32066e7f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Add edges to the bipartite graph\n",
    "G.add_edges_from(edges)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "1cb43d5c-f38c-452a-bbca-3fcd1ae9900a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a dictionary to store node colors\n",
    "node_colors = {}\n",
    "\n",
    "# Determine the node color based on the number of overlaps of dissection. In this particular case, if there is dissection overlap three times or more the node will be coloured red\n",
    "for node in G.nodes:\n",
    "    num_edges = len(list(G.neighbors(node)))\n",
    "    node_colors[node] = 'red' if num_edges >= 3 else 'lightblue' #Choose colours of your choice"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "20b2f03d-233b-4900-8057-d47d08541798",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a bipartite layout\n",
    "pos = nx.bipartite_layout(G, group1) #Choose variable of your choice"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "0ea21c05-87eb-4e1a-9584-65667c594cdc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAgAAAAGbCAYAAACyMSjnAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy81sbWrAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAzE0lEQVR4nO3deXxU9b3/8ffMZCULSSABWSokYJFFUMSdVb2CdQEVqj4silZFtFqrVB/tVcFW2ypWKtdat2Ktv1tFXFrbXmtFBZGlVEUUpBLZQSEkZCEhCZn5/v6AiSQzSSbJLGd5PR8PH23OOTNzJlE+r5xl8BhjjAAAgKt4E70DAAAg/ggAAABciAAAAMCFCAAAAFyIAAAAwIUIAAAAXIgAAADAhQgAAABciAAAAMCFCADAhcaNG6dx48YlejcsyePx6JZbbkn0bgAxRwDAUZ577jl5PB79+9//bvdja2pqNGfOHL333nvR37EE2LBhg+bMmaOtW7cmeldC7N27V3fffbeGDRumzMxMpaWlacCAAZoxY4aWL1+e6N0DXCEp0TsAWEVNTY3mzp0rSY747XjDhg2aO3euxo0bp379+jVZ99ZbbyVmpyT961//0ne+8x1VVVXp8ssv18yZM5WamqotW7bo9ddf13PPPaelS5dqzJgxCdtHwA0IACDGqqurlZGRkejdaCIlJSUhr7t//35NnjxZSUlJWrt2rQYNGtRk/c9//nO9+OKLSk9Pb/V5rPg9BeyGUwBwvGuuuUaZmZnatWuXJk+erMzMTOXn5+vOO++U3++XJG3dulX5+fmSpLlz58rj8cjj8WjOnDmNz7Nx40ZddtllysvLU1pamk4++WT95S9/afJawVMQS5cu1axZs1RQUKA+ffpIkqqqqvTDH/5Q/fr1U2pqqgoKCnTuuefqo48+avIcq1ev1sSJE9W1a1d16dJFY8eO1QcffBDyvnbt2qXrrrtOvXr1Umpqqvr376+bbrpJ9fX1eu655zR16lRJ0vjx4xvfT/D0RrhrAPbu3avrrrtOPXr0UFpamoYPH64//OEPTbbZunWrPB6P5s2bp6eeekpFRUVKTU3VqFGjtGbNmjZ/Fr/73e/01Vdfaf78+SHDXzp8/v2KK67QqFGjGpfNmTNHHo9HGzZs0JVXXqnc3FydddZZkqR169bpmmuuUWFhodLS0tSzZ09de+21Ki0tbfK8wefYuHGjpk2bpuzsbHXr1k233Xabamtrw+7r66+/rqFDhyo1NVVDhgzRm2++2eb7A+yEIwBwBb/fr/POO0+nnnqq5s2bp7fffluPPPKIioqKdNNNNyk/P19PPPGEbrrpJk2ZMkWXXHKJJOmEE06QJK1fv15nnnmmevfurbvvvlsZGRlatGiRJk+erFdeeUVTpkxp8nqzZs1Sfn6+7r33XlVXV0uSZs6cqcWLF+uWW27R4MGDVVpaquXLl+vzzz/XSSedJEl65513NGnSJI0cOVL33XefvF6vFi5cqAkTJuj999/XKaecIknavXu3TjnlFJWXl+uGG27QoEGDtGvXLi1evFg1NTUaM2aMbr31Vj322GP6yU9+ouOPP16SGv+3uYMHD2rcuHEqLi7WLbfcov79++vll1/WNddco/Lyct12221Ntv/f//1fVVVV6cYbb5TH49FDDz2kSy65RJs3b1ZycnKLP4c33nhD6enpjd/f9pg6daoGDhyoBx98UMG/xfyf//ynNm/erBkzZqhnz55av369nnrqKa1fv16rVq2Sx+Np8hzTpk1Tv3799Itf/EKrVq3SY489pv379+v5559vst3y5cv16quvatasWcrKytJjjz2mSy+9VNu3b1e3bt3ave+AJRnAQRYuXGgkmTVr1jQuu/rqq40kc//99zfZ9sQTTzQjR45s/LqkpMRIMvfdd1/I85599tlm2LBhpra2tnFZIBAwZ5xxhhk4cGDI65911lmmoaGhyXN07drV3HzzzS3ueyAQMAMHDjTnnXeeCQQCjctrampM//79zbnnntu4bPr06cbr9TZ5n0c/jzHGvPzyy0aSeffdd0O2GTt2rBk7dmzj1/PnzzeSzAsvvNC4rL6+3px++ukmMzPTVFZWGmOM2bJli5FkunXrZsrKyhq3/fOf/2wkmTfeeKPF92eMMbm5uWbEiBEhyysrK01JSUnjPwcOHGhcd9999xlJ5oorrgh5XE1NTciyP/3pT0aSWbZsWchzXHTRRU22nTVrlpFkPvnkk8ZlkkxKSoopLi5uXPbJJ58YSWbBggWtvj/ATjgFANeYOXNmk69Hjx6tzZs3t/m4srIyvfPOO5o2bZqqqqq0b98+7du3T6WlpTrvvPO0adMm7dq1q8ljrr/+evl8vibLcnJytHr1au3evTvs66xdu1abNm3SlVdeqdLS0sbXqa6u1tlnn61ly5YpEAgoEAjo9ddf14UXXqiTTz455Hma/9Ybib///e/q2bOnrrjiisZlycnJuvXWW3XgwAEtXbq0yfbf/e53lZub2/j16NGjJanN72dlZaUyMzNDln/ve99Tfn5+4z933XVXyDbNf36SmlwrUFtbq3379um0006TpJBTK5J08803N/n6Bz/4gaTD7/9o55xzjoqKihq/PuGEE5SdnR3Rvy+AXXAKAK6QlpbWeI4/KDc3V/v372/zscXFxTLG6J577tE999wTdpu9e/eqd+/ejV/3798/ZJuHHnpIV199tfr27auRI0fq/PPP1/Tp01VYWChJ2rRpkyTp6quvbnFfKioqVF9fr8rKSg0dOrTNfY/Utm3bNHDgQHm9TX8nCJ4y2LZtW5Pl3/rWt5p8HYyBtr6fWVlZOnDgQMjy+++/v/He+3PPPTfsY8N9T8vKyjR37ly9+OKL2rt3b5N1FRUVIdsPHDiwyddFRUXyer0ht0o2f39S5P++AHZBAMAVmv823h6BQECSdOedd+q8884Lu82AAQOafB3uKvZp06Zp9OjReu211/TWW2/p4Ycf1q9+9Su9+uqrmjRpUuPrPPzwwxoxYkTY18nMzFRZWVmH30u0tPT9NEfOzbdk0KBB+uSTT3To0KEm1woEr7VoTUvf0xUrVmj27NkaMWKEMjMzFQgENHHixMbvZ2taOlrS0fcH2AkBABzR0jAI/oaenJysc845p1Ovccwxx2jWrFmaNWuW9u7dq5NOOkkPPPCAJk2a1HjIOTs7u9XXyc/PV3Z2tj777LNWX6s9pwKOPfZYrVu3ToFAoMlRgI0bNzauj4YLLrhAq1at0muvvaZp06Z16rn279+vJUuWaO7cubr33nsblwePpISzadOmJkcSiouLFQgEQj4nAXADrgEAjujSpYskqby8vMnygoICjRs3Tk8++aS++uqrkMeVlJS0+dx+vz/kkHRBQYF69eqluro6SdLIkSNVVFSkefPmhT1MHnwdr9eryZMn64033gj7iYfB31KD98k3fz/hnH/++fr666/10ksvNS5raGjQggULlJmZqbFjx7b5HJG46aab1KNHD91+++364osvWtz3SAR/S2/+mPnz57f4mMcff7zJ1wsWLJAkTZo0KeLXBZyCIwDAEenp6Ro8eLBeeuklHXfcccrL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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Visualisation of the intersection graph and using Konig theorem identify maximum independant set(lightblue nodes)\n",
    "\n",
    "# Draw the bipartite graph\n",
    "nx.draw_networkx_nodes(G, pos, nodelist=group0, node_color='lightblue', node_size=100)\n",
    "nx.draw_networkx_nodes(G, pos, nodelist=group1, node_color='lightblue', node_size=100)\n",
    "nx.draw_networkx_labels(G, pos, font_size=8)\n",
    "nx.draw_networkx_edges(G, pos)\n",
    "nx.draw_networkx_nodes(G, pos, nodelist=node_colors.keys(), node_color=list(node_colors.values()), node_size=100)\n",
    "\n",
    "plt.title('Intersection Graph')\n",
    "plt.gca().set_aspect('equal', adjustable='box')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "0c0006f5-2ffc-40fe-9d71-bc76c4e0879a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#From intersection graph, identify node pairs from maximum idependant set\n",
    "maximum_independant_set = [(4, 23), (7, 12), (27, 34), (28, 37), (16, 36)]\n",
    "\n",
    "# Add dissection edges in red\n",
    "for node_pair in maximum_independant_set:\n",
    "    node1, node2 = node_pair\n",
    "    polygon_graph.add_edge(node1, node2, color='red')\n",
    "\n",
    "# Visualization\n",
    "pos = nx.get_node_attributes(polygon_graph, 'pos')\n",
    "edge_colors = [polygon_graph[u][v].get('color', 'black') for u, v in polygon_graph.edges()]\n",
    "\n",
    "nx.draw(polygon_graph, pos, with_labels=True, node_size=200, font_size=8, edge_color=edge_colors)\n",
    "plt.title('Polygon with Three Holes and Dissection Edges')\n",
    "\n",
    "# Show the plot\n",
    "plt.gca().set_aspect('equal', adjustable='box')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b7089f5e-7ca5-46cc-bef1-6a4a5d887467",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
